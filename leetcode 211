class Node:
    def __init__(self):
        self.children = collections.defaultdict(Node)
        self.isword = False
class WordDictionary:
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = Node()

    def addWord(self, word: str) -> None:
        """
        Adds a word into the data structure.
        """
        temp = self.root
        for i in word:
            temp = temp.children[i]
        temp.isword = True

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        """
        temp = self.root
        def dfs(node, i=0):
            if i == len(word):
                return node.isword
            if word[i] == '.':
                return any([dfs(key, i+1) for key in node.children.values()])
            if word[i] in node.children:
                node = node.children.get(word[i])
                return dfs(node, i+1)
            return False
        return dfs(temp, 0)
                


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
