class Node:
    def __init__(self):
        self.words = collections.defaultdict(Node)
        self.isword = False
class Trie:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = Node()

    def insert(self, word: str) -> None:
        """
        Inserts a word into the trie.
        """
        temp = self.root
        for i in word:
            temp = temp.words[i]
        temp.isword = True

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the trie.
        """
        temp = self.root
        for i in word:
            temp = temp.words.get(i)
            if temp == None:
                return False
        return temp.isword
            

    def startsWith(self, prefix: str) -> bool:
        """
        Returns if there is any word in the trie that starts with the given prefix.
        """
        temp = self.root
        for i in prefix:
            temp = temp.words.get(i)
            if temp == None:
                return False
        return True


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
