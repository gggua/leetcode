# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def sortList(self, head: ListNode) -> ListNode:
        if not head or not head.next:
            return head
        pre, slow, fast = head, head, head
        while fast and fast.next:
            pre = slow
            slow = slow.next
            fast = fast.next.next
        pre.next = None
        head1 = self.sortList(head)
        head2 = self.sortList(slow)
        return self.merge(head1, head2)
    def merge(self, head1, head2):
        if not head1:
            return head2
        if not head2:
            return head1
        dummynode = ListNode(0)
        temp = dummynode
        while head1 and head2:
            if head1.val <= head2.val:
                temp.next = head1
                head1 = head1.next
                temp = temp.next
            else:
                temp.next = head2
                head2 = head2.next
                temp = temp.next
        temp.next = head1 if head1 else head2
        return dummynode.next
                
