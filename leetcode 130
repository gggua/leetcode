import copy
class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        if board != []:
            for j in range(len(board[0])):
                if board[0][j] == 'O':
                    board[0][j] = '-'
                if board[-1][j] == 'O':
                    board[-1][j] = '-'
            for i in range(len(board)):
                if board[i][0] == 'O':
                    board[i][0] = '-'
                if board[i][-1] == 'O':
                    board[i][-1] = '-'
            def dfs(pre, board):
                for i in range(1, len(board)):
                    for j in range(1, len(board[0])):
                        if board[i][j] == 'O' and (board[i-1][j] == '-' or board[i][j-1] == '-' or board[i+1][j] == '-' or board[i][j+1] == '-'):
                            board[i][j] = '-'
                if board != pre:
                    pre = copy.deepcopy(board)
                    dfs(pre, board)
            pre = copy.deepcopy(board)
            dfs(pre, board)
            for i in range(len(board)):
                for j in range(len(board[0])):
                    if board[i][j] == 'O':
                        board[i][j] = 'X'
                    elif board[i][j] == '-':
                        board[i][j] = 'O'
